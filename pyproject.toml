[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "seqme"
version = "0.2.3"
description = "Metrics for evaluating biological sequence design."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
authors = [
    { name = "Rasmus Møller-Larsen" },
    { name = "Adam Izdebski" },
    { name = "Jan Olszewski" },
    { name = "Pankhil Gawade" },
    { name = "Michal Kmicikiewicz" },
    { name = "Wojciech Zarzecki" },
    { name = "Ewa Szczurek" },
]

maintainers = [{ name = "Rasmus Møller-Larsen" }]
urls.Documentation = "https://seqme.readthedocs.io"
urls.Source = "https://github.com/szczurek-lab/seqme"
urls.Home-page = "https://github.com/szczurek-lab/seqme"

classifiers = [
    "License :: OSI Approved :: BSD License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    "matplotlib>=3.6",
    "numpy",
    "pandas>=1.5",
    "moocore",
    "scipy",
    "torch",
    "tqdm",
    "scikit-learn",
    "umap-learn",
    "pylev",
    "pylatex",
]

[project.optional-dependencies]

esm2 = ["transformers"]
esmfold = ["transformers"]
prostt5 = ["transformers", "sentencepiece"]
aa_descriptors = ["modlamp"]
hyformer_molecules = [
    "deepchem",
    "torchvision",
    "transformers",
    #"hyformer @ git+https://github.com/szczurek-lab/hyformer.git@main"
]

hyformer = [
    "transformers",
    "torchvision",
    "einops>=0.7",
    #"hyformer @ git+https://github.com/szczurek-lab/hyformer.git@v2.0"
]

rnafm = ["rna-fm"]
genalm = ["transformers", "einops"]

doc = [
    "seaborn",
    "ipykernel",
    "ipywidgets",
    "sphinx",
    "nbsphinx",
    "myst-parser",
    "myst_nb",
    "scanpydoc",
    "seaborn",
    "sphinx-book-theme",
    "sphinx-gallery",
    "sphinx-copybutton",
    "sphinx-autodoc-typehints",
]

dev = [
    "mypy",
    "nbstripout",
    "pre-commit>=3.0.0",
    "pytest",
    "pytest-cov",
    "ruff",
    "ipykernel",
    "ipywidgets",
]

[tool.ruff]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",      # Errors detected by Pyflakes
    "E",      # Errors detected by Pycodestyle
    "W",      # Warnings detected by Pycodestyle
    "I",      # isort (import sorting)
    "D",      # pydocstyle (docstring conventions)
    "B",      # flake8-bugbear (common bugs and design issues)
    "TID",    # flake8-tidy-imports (import restrictions)
    "C4",     # flake8-comprehensions (list/set/dict comprehension improvements)
    "BLE",    # flake8-blind-except (discourage bare except)
    "UP",     # pyupgrade (syntax upgrades for newer Python versions)
    "TCH",    # typing imports (prefer standard library typing)
    "RUF100", # Report unused noqa directives
]

ignore = [
    # Pycodestyle
    "E501", # Line too long (we accept long comments; formatter handles code)
    "E731", # Do not assign a lambda expression (we allow this for convenience)
    "E741", # Ambiguous variable name "l", "O", or "I" (we allow "I" for identity matrices)

    # Flake8-bugbear
    "B008", # Do not perform function calls in default arguments (allowed when result is immutable)

    # Pydocstyle — disable “missing docstring” checks (docstrings optional)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__

    # Pydocstyle — stylistic rules we don't want
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D203", # 1 blank line required before class docstring
    "D212", # Enforces first-line docstring — disabled, since we prefer second-line
    # "D213",  # Multi-line docstring should start on the second line
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
no_strict_optional = true


[tool.hatch.build.targets.sdist]
exclude = ["docs", "docs/**"]

[tool.hatch.build.targets.wheel]
exclude = ["docs", "docs/**"]

[tool.coverage.run]
branch = true
omit = ["*/.conda/*", "*/tests/*"]
